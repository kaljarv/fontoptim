# AUTOGENERATED! DO NOT EDIT! File to edit: 06_data_augmentation.ipynb (unless otherwise specified).

__all__ = ['create_font_learner', 'get_learner']

# Cell
from .core import *
from .fontlearner import *
from .ocrlearner import *
from collections import OrderedDict
from enum import Enum, auto
from fastai.data.all import *
from fastai.vision.all import *
import gc
from itertools import product
from nbdev.showdoc import *
from pandas import DataFrame
import pydiffvg
import torch
import torchvision.transforms.functional as VF
import torchvision.transforms as VT
from typing import Callable, List, Protocol, Tuple, Union

# Cell

def create_font_learner(
    ocr_model = None,
    ocr_learner = None,
    vocab = VOCAB_UC,
    letters = None,
    folder = None,
    normalise = False,
    epoch_len = 1,
    vector_class = SansSerifFontRL,
    input_shape = None,
    n_colors_out = 1,
    eps = None,
    lr = 1e-2,
    debug = False,
    cbs = None,
    seed = None,
    init_range = 2.,
    samples = None,
    bs = None,
    ) -> VectorLearner:
    """A factory function for creating a `VectorLearner` for full font optimisation."""

    if eps is not None: warn(f"Using eps {eps}")
    if ocr_model is not None and input_shape is None:
        input_shape = (28,28)
        warn(f"Using default input_shape: {input_shape}")

    if ocr_model is None: ocr_model = ocr_learner.model
    if vocab is None: vocab = get_vocab(ocr_learner)

    raster_norm = ocr_learner.dls.train.after_batch[1] if normalise else None

    if input_shape is None:
        ocr_img = ocr_learner.dls.train_ds[0][0]
        canvas_width = ocr_img.width
        canvas_height = ocr_img.height
    else: canvas_width, canvas_height = input_shape

    def get_dl(): return LetterDL.from_vocab(vocab, epoch_len=epoch_len, bs=bs) if letters is None else \
                         LetterDL(vocab=vocab, letters=letters, epoch_len=epoch_len, bs=bs)
    dls = DataLoaders(get_dl(), get_dl())

    image_saver = ImageSaver(folder=folder) if folder is not None else None
    render_layer = vector_class(vocab=vocab,
                                raster_norm=raster_norm,
                                rendered_callback=image_saver,
                                canvas_width=canvas_width,
                                canvas_height=canvas_height,
                                n_colors_out=n_colors_out,
                                seed=seed,
                                eps=eps,
                                init_range=init_range,
                                samples=samples)
    if debug: render_layer.debug = debug
    font_model = render_layer

    # Params will be added by Learner
    get_optim = partial(Adam, lr=lr,
                              mom=.5,
                              sqr_mom=.9,
                              wd=0.) # NB. Eps can be also modified

    loss = OCRAndParamLoss(ocr_model=ocr_model,
                           vector_model=render_layer,
                           debug=debug)

    vector_learner = VectorLearner(dls=dls,
                                   model=font_model,
                                   loss_func=loss,
                                   opt_func=get_optim,
                                   cbs=cbs,
                                   image_saver=image_saver)

    return vector_learner

def get_learner(seed=42, **kwargs):
    gc.collect()
    if 'ocr_model' not in locals() or ocr_model is None:
        ocr_model = load_ocr_model(arch=kaggle_cnn_a_with_res,
                                   df=get_combined_az_and_tmnist_df)
    cb = DebugCB(vocal=False)
    learner = create_font_learner(letters=None,
                                cbs=cb,
                                folder=None,
                                ocr_model=ocr_model,
                                n_colors_out=1,
                                lr=1e-2,
                                init_range=2.,
                                seed=seed,
                                **kwargs)
    return learner